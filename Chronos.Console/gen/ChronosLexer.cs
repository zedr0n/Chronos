//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/mbp/Dev/Chronos/Chronos.Console/Grammar/Chronos.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ChronosLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, COIN=2, WORD=3, WHITESPACE=4, NEWLINE=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"C", "R", "E", "A", "T", "O", "I", "N", "LOWERCASE", "UPPERCASE", "CREATE", 
		"COIN", "WORD", "WHITESPACE", "NEWLINE"
	};


	public ChronosLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ChronosLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "COIN", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chronos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChronosLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\a', 'W', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x6', '\xE', '\x44', '\n', '\xE', '\r', '\xE', '\xE', 
		'\xE', '\x45', '\x3', '\xF', '\x6', '\xF', 'I', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', 'J', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x5', '\x10', 
		'P', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', 'T', '\n', 
		'\x10', '\r', '\x10', '\xE', '\x10', 'U', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x5', '\x2', '\a', '\x2', '\t', '\x2', '\v', '\x2', '\r', '\x2', 
		'\xF', '\x2', '\x11', '\x2', '\x13', '\x2', '\x15', '\x2', '\x17', '\x3', 
		'\x19', '\x4', '\x1B', '\x5', '\x1D', '\x6', '\x1F', '\a', '\x3', '\x2', 
		'\r', '\x4', '\x2', '\x45', '\x45', '\x65', '\x65', '\x4', '\x2', 'T', 
		'T', 't', 't', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', '\x43', 
		'\x43', '\x63', '\x63', '\x4', '\x2', 'V', 'V', 'v', 'v', '\x4', '\x2', 
		'Q', 'Q', 'q', 'q', '\x4', '\x2', 'K', 'K', 'k', 'k', '\x4', '\x2', 'P', 
		'P', 'p', 'p', '\x3', '\x2', '\x63', '|', '\x3', '\x2', '\x43', '\\', 
		'\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 'R', '\x2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '#', '\x3', '\x2', '\x2', '\x2', '\a', '%', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', ')', 
		'\x3', '\x2', '\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x11', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x31', '\x3', '\x2', '\x2', '\x2', '\x15', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x35', '\x3', '\x2', '\x2', '\x2', '\x19', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'H', '\x3', '\x2', '\x2', '\x2', '\x1F', 'S', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\t', '\x2', '\x2', '\x2', '\"', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\t', '\x4', '\x2', '\x2', '&', '\b', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\t', '\x5', '\x2', '\x2', '(', '\n', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\t', '\x6', '\x2', '\x2', '*', 
		'\f', '\x3', '\x2', '\x2', '\x2', '+', ',', '\t', '\a', '\x2', '\x2', 
		',', '\xE', '\x3', '\x2', '\x2', '\x2', '-', '.', '\t', '\b', '\x2', '\x2', 
		'.', '\x10', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\t', '\t', '\x2', 
		'\x2', '\x30', '\x12', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\t', 
		'\n', '\x2', '\x2', '\x32', '\x14', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\t', '\v', '\x2', '\x2', '\x34', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\x3', '\x2', '\x2', '\x36', '\x37', '\x5', 
		'\x5', '\x3', '\x2', '\x37', '\x38', '\x5', '\a', '\x4', '\x2', '\x38', 
		'\x39', '\x5', '\t', '\x5', '\x2', '\x39', ':', '\x5', '\v', '\x6', '\x2', 
		':', ';', '\x5', '\a', '\x4', '\x2', ';', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x5', '\x3', '\x2', '\x2', '=', '>', '\x5', '\r', '\a', 
		'\x2', '>', '?', '\x5', '\xF', '\b', '\x2', '?', '@', '\x5', '\x11', '\t', 
		'\x2', '@', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x5', 
		'\x13', '\n', '\x2', '\x42', '\x44', '\x5', '\x15', '\v', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\t', '\f', '\x2', '\x2', 
		'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\b', '\xF', '\x2', '\x2', 
		'M', '\x1E', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\a', '\xF', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\a', '\f', '\x2', 
		'\x2', 'R', 'T', '\a', '\xF', '\x2', '\x2', 'S', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', ' ', '\x3', '\x2', '\x2', '\x2', '\t', '\x2', '\x43', '\x45', 
		'J', 'O', 'S', 'U', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
