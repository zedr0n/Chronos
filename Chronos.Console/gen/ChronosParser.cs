//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/mbp/Dev/Chronos/Chronos.Console/Grammar/Chronos.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ChronosParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, COIN=2, TRACK=3, GUID=4, BAG=5, ADD=6, BAGS=7, TO=8, WORD=9, 
		WHITESPACE=10, NEWLINE=11, NUMBER=12;
	public const int
		RULE_command = 0, RULE_query = 1, RULE_create = 2, RULE_createCoin = 3, 
		RULE_createBag = 4, RULE_trackAsset = 5, RULE_add = 6, RULE_addAssetToBag = 7, 
		RULE_bags = 8, RULE_asset = 9, RULE_duration = 10, RULE_name = 11, RULE_ticker = 12, 
		RULE_quantity = 13, RULE_guid = 14, RULE_guidOptional = 15, RULE_newGuid = 16, 
		RULE_bagId = 17, RULE_assetId = 18, RULE_bagDescriptor = 19, RULE_assetDescriptor = 20;
	public static readonly string[] ruleNames = {
		"command", "query", "create", "createCoin", "createBag", "trackAsset", 
		"add", "addAssetToBag", "bags", "asset", "duration", "name", "ticker", 
		"quantity", "guid", "guidOptional", "newGuid", "bagId", "assetId", "bagDescriptor", 
		"assetDescriptor"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "COIN", "TRACK", "GUID", "BAG", "ADD", "BAGS", "TO", "WORD", 
		"WHITESPACE", "NEWLINE", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chronos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChronosParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChronosParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChronosParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CommandContext : ParserRuleContext {
		public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		public TrackAssetContext trackAsset() {
			return GetRuleContext<TrackAssetContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; create();
				}
				break;
			case TRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; trackAsset();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44; add();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public BagsContext bags() {
			return GetRuleContext<BagsContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; bags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(ChronosParser.CREATE, 0); }
		public CreateCoinContext createCoin() {
			return GetRuleContext<CreateCoinContext>(0);
		}
		public CreateBagContext createBag() {
			return GetRuleContext<CreateBagContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 4, RULE_create);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(CREATE);
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COIN:
				{
				State = 50; createCoin();
				}
				break;
			case BAG:
				{
				State = 51; createBag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateCoinContext : ParserRuleContext {
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TickerContext ticker() {
			return GetRuleContext<TickerContext>(0);
		}
		public GuidOptionalContext guidOptional() {
			return GetRuleContext<GuidOptionalContext>(0);
		}
		public CreateCoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createCoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreateCoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreateCoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateCoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateCoinContext createCoin() {
		CreateCoinContext _localctx = new CreateCoinContext(Context, State);
		EnterRule(_localctx, 6, RULE_createCoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(COIN);
			State = 55; name();
			State = 56; ticker();
			State = 57; guidOptional();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBagContext : ParserRuleContext {
		public ITerminalNode BAG() { return GetToken(ChronosParser.BAG, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public GuidOptionalContext guidOptional() {
			return GetRuleContext<GuidOptionalContext>(0);
		}
		public CreateBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreateBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreateBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBagContext createBag() {
		CreateBagContext _localctx = new CreateBagContext(Context, State);
		EnterRule(_localctx, 8, RULE_createBag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(BAG);
			State = 60; name();
			State = 61; guidOptional();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrackAssetContext : ParserRuleContext {
		public ITerminalNode TRACK() { return GetToken(ChronosParser.TRACK, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public TrackAssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trackAsset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTrackAsset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTrackAsset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrackAsset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrackAssetContext trackAsset() {
		TrackAssetContext _localctx = new TrackAssetContext(Context, State);
		EnterRule(_localctx, 10, RULE_trackAsset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(TRACK);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COIN) {
				{
				State = 64; asset();
				}
			}

			State = 67; name();
			State = 68; duration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(ChronosParser.ADD, 0); }
		public AddAssetToBagContext addAssetToBag() {
			return GetRuleContext<AddAssetToBagContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 12, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(ADD);
			State = 71; addAssetToBag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddAssetToBagContext : ParserRuleContext {
		public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public AssetDescriptorContext assetDescriptor() {
			return GetRuleContext<AssetDescriptorContext>(0);
		}
		public BagDescriptorContext bagDescriptor() {
			return GetRuleContext<BagDescriptorContext>(0);
		}
		public ITerminalNode TO() { return GetToken(ChronosParser.TO, 0); }
		public AddAssetToBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addAssetToBag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAddAssetToBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAddAssetToBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssetToBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddAssetToBagContext addAssetToBag() {
		AddAssetToBagContext _localctx = new AddAssetToBagContext(Context, State);
		EnterRule(_localctx, 14, RULE_addAssetToBag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; quantity();
			State = 74; assetDescriptor();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 75; Match(TO);
				}
			}

			State = 78; bagDescriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagsContext : ParserRuleContext {
		public ITerminalNode BAGS() { return GetToken(ChronosParser.BAGS, 0); }
		public BagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagsContext bags() {
		BagsContext _localctx = new BagsContext(Context, State);
		EnterRule(_localctx, 16, RULE_bags);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(BAGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAsset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAsset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(Context, State);
		EnterRule(_localctx, 18, RULE_asset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(COIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ChronosParser.NUMBER, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 20, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 22, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickerContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public TickerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ticker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTicker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTicker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTicker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickerContext ticker() {
		TickerContext _localctx = new TickerContext(Context, State);
		EnterRule(_localctx, 24, RULE_ticker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ChronosParser.NUMBER, 0); }
		public QuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterQuantity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitQuantity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityContext quantity() {
		QuantityContext _localctx = new QuantityContext(Context, State);
		EnterRule(_localctx, 26, RULE_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public GuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidContext guid() {
		GuidContext _localctx = new GuidContext(Context, State);
		EnterRule(_localctx, 28, RULE_guid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidOptionalContext : ParserRuleContext {
		public NewGuidContext newGuid() {
			return GetRuleContext<NewGuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public GuidOptionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidOptional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterGuidOptional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitGuidOptional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidOptional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidOptionalContext guidOptional() {
		GuidOptionalContext _localctx = new GuidOptionalContext(Context, State);
		EnterRule(_localctx, 30, RULE_guidOptional);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; newGuid();
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; Match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewGuidContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(ChronosParser.NEWLINE, 0); }
		public NewGuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newGuid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterNewGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitNewGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewGuidContext newGuid() {
		NewGuidContext _localctx = new NewGuidContext(Context, State);
		EnterRule(_localctx, 32, RULE_newGuid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagIdContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public BagIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bagId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBagId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBagId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBagId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagIdContext bagId() {
		BagIdContext _localctx = new BagIdContext(Context, State);
		EnterRule(_localctx, 34, RULE_bagId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; guid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetIdContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public AssetIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAssetId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAssetId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssetId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetIdContext assetId() {
		AssetIdContext _localctx = new AssetIdContext(Context, State);
		EnterRule(_localctx, 36, RULE_assetId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; guid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagDescriptorContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public BagDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bagDescriptor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBagDescriptor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBagDescriptor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBagDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagDescriptorContext bagDescriptor() {
		BagDescriptorContext _localctx = new BagDescriptorContext(Context, State);
		EnterRule(_localctx, 38, RULE_bagDescriptor);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; guid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; Match(WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetDescriptorContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public AssetDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetDescriptor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAssetDescriptor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAssetDescriptor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssetDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetDescriptorContext assetDescriptor() {
		AssetDescriptorContext _localctx = new AssetDescriptorContext(Context, State);
		EnterRule(_localctx, 40, RULE_assetDescriptor);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; guid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 's', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x30', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x37', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x44', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 'O', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x63', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', 'm', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'q', '\n', '\x16', '\x3', '\x16', '\x2', '\x2', '\x17', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', '\x2', '\x2', '\x2', 
		'\x65', '\x2', '/', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x33', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x41', '\x3', '\x2', '\x2', '\x2', '\xE', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'K', '\x3', '\x2', '\x2', '\x2', '\x12', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'T', '\x3', '\x2', '\x2', '\x2', '\x16', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'X', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x1C', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '^', '\x3', '\x2', '\x2', '\x2', ' ', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x64', '\x3', '\x2', '\x2', '\x2', '$', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '&', 'h', '\x3', '\x2', '\x2', '\x2', '(', 'l', '\x3', '\x2', 
		'\x2', '\x2', '*', 'p', '\x3', '\x2', '\x2', '\x2', ',', '\x30', '\x5', 
		'\x6', '\x4', '\x2', '-', '\x30', '\x5', '\f', '\a', '\x2', '.', '\x30', 
		'\x5', '\xE', '\b', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', '/', 
		'-', '\x3', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x3', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x5', '\x12', 
		'\n', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', 
		'\a', '\x3', '\x2', '\x2', '\x34', '\x37', '\x5', '\b', '\x5', '\x2', 
		'\x35', '\x37', '\x5', '\n', '\x6', '\x2', '\x36', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x4', '\x2', '\x2', 
		'\x39', ':', '\x5', '\x18', '\r', '\x2', ':', ';', '\x5', '\x1A', '\xE', 
		'\x2', ';', '<', '\x5', ' ', '\x11', '\x2', '<', '\t', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', '\a', '\x2', '\x2', '>', '?', '\x5', '\x18', '\r', 
		'\x2', '?', '@', '\x5', ' ', '\x11', '\x2', '@', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\a', '\x5', '\x2', '\x2', '\x42', '\x44', '\x5', 
		'\x14', '\v', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\x18', '\r', '\x2', '\x46', 'G', '\x5', 
		'\x16', '\f', '\x2', 'G', '\r', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\a', '\b', '\x2', '\x2', 'I', 'J', '\x5', '\x10', '\t', '\x2', 'J', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\x1C', '\xF', '\x2', 'L', 
		'N', '\x5', '*', '\x16', '\x2', 'M', 'O', '\a', '\n', '\x2', '\x2', 'N', 
		'M', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '(', '\x15', '\x2', 
		'Q', '\x11', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\t', '\x2', 
		'\x2', 'S', '\x13', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x4', 
		'\x2', '\x2', 'U', '\x15', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', 
		'\xE', '\x2', '\x2', 'W', '\x17', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', 
		'\a', '\v', '\x2', '\x2', 'Y', '\x19', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\a', '\v', '\x2', '\x2', '[', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '\xE', '\x2', '\x2', ']', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '\v', '\x2', '\x2', '_', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x63', '\x5', '\"', '\x12', '\x2', '\x61', '\x63', 
		'\a', '\v', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\r', '\x2', '\x2', '\x65', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x5', '\x1E', '\x10', '\x2', 'g', '%', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x5', '\x1E', '\x10', '\x2', 'i', '\'', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x5', '\x1E', '\x10', '\x2', 'k', 
		'm', '\a', '\v', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 
		'k', '\x3', '\x2', '\x2', '\x2', 'm', ')', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x5', '\x1E', '\x10', '\x2', 'o', 'q', '\a', '\v', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', '+', '\x3', '\x2', '\x2', '\x2', '\t', '/', '\x36', '\x43', 'N', 
		'\x62', 'l', 'p',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
