//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/mbp/Dev/Chronos/Chronos.Console/Grammar/Chronos.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ChronosParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, COIN=2, TRACK=3, GUID=4, WORD=5, WHITESPACE=6, NEWLINE=7, NUMBER=8;
	public const int
		RULE_command = 0, RULE_createCoin = 1, RULE_trackCoin = 2, RULE_duration = 3, 
		RULE_name = 4, RULE_ticker = 5, RULE_guid = 6, RULE_newGuid = 7;
	public static readonly string[] ruleNames = {
		"command", "createCoin", "trackCoin", "duration", "name", "ticker", "guid", 
		"newGuid"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "COIN", "TRACK", "GUID", "WORD", "WHITESPACE", "NEWLINE", 
		"NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chronos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChronosParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChronosParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChronosParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CommandContext : ParserRuleContext {
		public CreateCoinContext createCoin() {
			return GetRuleContext<CreateCoinContext>(0);
		}
		public TrackCoinContext trackCoin() {
			return GetRuleContext<TrackCoinContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; createCoin();
				}
				break;
			case TRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; trackCoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateCoinContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(ChronosParser.CREATE, 0); }
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TickerContext ticker() {
			return GetRuleContext<TickerContext>(0);
		}
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public CreateCoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createCoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreateCoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreateCoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateCoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateCoinContext createCoin() {
		CreateCoinContext _localctx = new CreateCoinContext(Context, State);
		EnterRule(_localctx, 2, RULE_createCoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(CREATE);
			State = 21; Match(COIN);
			State = 22; name();
			State = 23; ticker();
			State = 24; guid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrackCoinContext : ParserRuleContext {
		public ITerminalNode TRACK() { return GetToken(ChronosParser.TRACK, 0); }
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public TrackCoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trackCoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTrackCoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTrackCoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrackCoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrackCoinContext trackCoin() {
		TrackCoinContext _localctx = new TrackCoinContext(Context, State);
		EnterRule(_localctx, 4, RULE_trackCoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(TRACK);
			State = 27; Match(COIN);
			State = 28; name();
			State = 29; duration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ChronosParser.NUMBER, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 6, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 8, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickerContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public TickerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ticker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTicker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTicker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTicker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickerContext ticker() {
		TickerContext _localctx = new TickerContext(Context, State);
		EnterRule(_localctx, 10, RULE_ticker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidContext : ParserRuleContext {
		public NewGuidContext newGuid() {
			return GetRuleContext<NewGuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public GuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidContext guid() {
		GuidContext _localctx = new GuidContext(Context, State);
		EnterRule(_localctx, 12, RULE_guid);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; newGuid();
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; Match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewGuidContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(ChronosParser.NEWLINE, 0); }
		public NewGuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newGuid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterNewGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitNewGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewGuidContext newGuid() {
		NewGuidContext _localctx = new NewGuidContext(Context, State);
		EnterRule(_localctx, 14, RULE_newGuid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '.', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x15', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'*', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', 
		'\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x2', 
		'\x2', '\'', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\b', '!', '\x3', '\x2', '\x2', '\x2', '\n', '#', '\x3', '\x2', '\x2', 
		'\x2', '\f', '%', '\x3', '\x2', '\x2', '\x2', '\xE', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '+', '\x3', '\x2', '\x2', '\x2', '\x12', '\x15', 
		'\x5', '\x4', '\x3', '\x2', '\x13', '\x15', '\x5', '\x6', '\x4', '\x2', 
		'\x14', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', 
		'\a', '\x3', '\x2', '\x2', '\x17', '\x18', '\a', '\x4', '\x2', '\x2', 
		'\x18', '\x19', '\x5', '\n', '\x6', '\x2', '\x19', '\x1A', '\x5', '\f', 
		'\a', '\x2', '\x1A', '\x1B', '\x5', '\xE', '\b', '\x2', '\x1B', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x5', '\x2', '\x2', 
		'\x1D', '\x1E', '\a', '\x4', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\n', 
		'\x6', '\x2', '\x1F', ' ', '\x5', '\b', '\x5', '\x2', ' ', '\a', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\a', '\n', '\x2', '\x2', '\"', '\t', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\a', '\x2', '\x2', '$', '\v', 
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\a', '\x2', '\x2', '&', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\'', '*', '\x5', '\x10', '\t', '\x2', '(', 
		'*', '\a', '\a', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', '*', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '\t', '\x2', '\x2', ',', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x14', ')',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
