//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/mbp/Dev/Chronos/Chronos.Console/Grammar/Chronos.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ChronosParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, COIN=2, TRACK=3, GUID=4, BAG=5, ADD=6, BAGS=7, STOP=8, START=9, 
		REMOVE=10, TO=11, REPLAY=12, WORD=13, WHITESPACE=14, NEWLINE=15, NUMBER=16, 
		DOUBLE=17;
	public const int
		RULE_command = 0, RULE_query = 1, RULE_start = 2, RULE_stop = 3, RULE_replay = 4, 
		RULE_create = 5, RULE_createCoin = 6, RULE_createBag = 7, RULE_trackAsset = 8, 
		RULE_add = 9, RULE_assetToBag = 10, RULE_remove = 11, RULE_removeAssetFromBag = 12, 
		RULE_to = 13, RULE_bag = 14, RULE_bags = 15, RULE_date = 16, RULE_asset = 17, 
		RULE_duration = 18, RULE_name = 19, RULE_ticker = 20, RULE_quantity = 21, 
		RULE_guid = 22, RULE_guidOptional = 23, RULE_newGuid = 24, RULE_bagDescriptor = 25, 
		RULE_assetDescriptor = 26;
	public static readonly string[] ruleNames = {
		"command", "query", "start", "stop", "replay", "create", "createCoin", 
		"createBag", "trackAsset", "add", "assetToBag", "remove", "removeAssetFromBag", 
		"to", "bag", "bags", "date", "asset", "duration", "name", "ticker", "quantity", 
		"guid", "guidOptional", "newGuid", "bagDescriptor", "assetDescriptor"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "COIN", "TRACK", "GUID", "BAG", "ADD", "BAGS", "STOP", 
		"START", "REMOVE", "TO", "REPLAY", "WORD", "WHITESPACE", "NEWLINE", "NUMBER", 
		"DOUBLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chronos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ChronosParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChronosParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChronosParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CommandContext : ParserRuleContext {
		public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		public TrackAssetContext trackAsset() {
			return GetRuleContext<TrackAssetContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public RemoveContext remove() {
			return GetRuleContext<RemoveContext>(0);
		}
		public ReplayContext replay() {
			return GetRuleContext<ReplayContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; create();
				}
				break;
			case TRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; trackAsset();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; add();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; stop();
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58; start();
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59; remove();
				}
				break;
			case REPLAY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60; replay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public BagsContext bags() {
			return GetRuleContext<BagsContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; bags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(ChronosParser.START, 0); }
		public ITerminalNode TRACK() { return GetToken(ChronosParser.TRACK, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 4, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(START);
			State = 66; Match(TRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(ChronosParser.STOP, 0); }
		public ITerminalNode TRACK() { return GetToken(ChronosParser.TRACK, 0); }
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 6, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(STOP);
			State = 69; Match(TRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplayContext : ParserRuleContext {
		public ITerminalNode REPLAY() { return GetToken(ChronosParser.REPLAY, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public ReplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replay; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterReplay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitReplay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplayContext replay() {
		ReplayContext _localctx = new ReplayContext(Context, State);
		EnterRule(_localctx, 8, RULE_replay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(REPLAY);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBER) {
				{
				State = 72; date();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(ChronosParser.CREATE, 0); }
		public CreateCoinContext createCoin() {
			return GetRuleContext<CreateCoinContext>(0);
		}
		public CreateBagContext createBag() {
			return GetRuleContext<CreateBagContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 10, RULE_create);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(CREATE);
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COIN:
				{
				State = 76; createCoin();
				}
				break;
			case BAG:
				{
				State = 77; createBag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateCoinContext : ParserRuleContext {
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TickerContext ticker() {
			return GetRuleContext<TickerContext>(0);
		}
		public GuidOptionalContext guidOptional() {
			return GetRuleContext<GuidOptionalContext>(0);
		}
		public CreateCoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createCoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreateCoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreateCoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateCoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateCoinContext createCoin() {
		CreateCoinContext _localctx = new CreateCoinContext(Context, State);
		EnterRule(_localctx, 12, RULE_createCoin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(COIN);
			State = 81; name();
			State = 82; ticker();
			State = 83; guidOptional();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBagContext : ParserRuleContext {
		public ITerminalNode BAG() { return GetToken(ChronosParser.BAG, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public GuidOptionalContext guidOptional() {
			return GetRuleContext<GuidOptionalContext>(0);
		}
		public CreateBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterCreateBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitCreateBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBagContext createBag() {
		CreateBagContext _localctx = new CreateBagContext(Context, State);
		EnterRule(_localctx, 14, RULE_createBag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(BAG);
			State = 86; name();
			State = 87; guidOptional();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrackAssetContext : ParserRuleContext {
		public ITerminalNode TRACK() { return GetToken(ChronosParser.TRACK, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public AssetContext asset() {
			return GetRuleContext<AssetContext>(0);
		}
		public TrackAssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trackAsset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTrackAsset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTrackAsset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrackAsset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrackAssetContext trackAsset() {
		TrackAssetContext _localctx = new TrackAssetContext(Context, State);
		EnterRule(_localctx, 16, RULE_trackAsset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(TRACK);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COIN) {
				{
				State = 90; asset();
				}
			}

			State = 93; name();
			State = 94; duration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(ChronosParser.ADD, 0); }
		public AssetToBagContext assetToBag() {
			return GetRuleContext<AssetToBagContext>(0);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 18, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(ADD);
			State = 97; assetToBag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetToBagContext : ParserRuleContext {
		public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public AssetDescriptorContext assetDescriptor() {
			return GetRuleContext<AssetDescriptorContext>(0);
		}
		public BagDescriptorContext bagDescriptor() {
			return GetRuleContext<BagDescriptorContext>(0);
		}
		public ToContext to() {
			return GetRuleContext<ToContext>(0);
		}
		public BagContext bag() {
			return GetRuleContext<BagContext>(0);
		}
		public AssetToBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetToBag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAssetToBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAssetToBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssetToBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetToBagContext assetToBag() {
		AssetToBagContext _localctx = new AssetToBagContext(Context, State);
		EnterRule(_localctx, 20, RULE_assetToBag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; quantity();
			State = 100; assetDescriptor();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 101; to();
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BAG) {
				{
				State = 104; bag();
				}
			}

			State = 107; bagDescriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(ChronosParser.REMOVE, 0); }
		public RemoveAssetFromBagContext removeAssetFromBag() {
			return GetRuleContext<RemoveAssetFromBagContext>(0);
		}
		public RemoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterRemove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitRemove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveContext remove() {
		RemoveContext _localctx = new RemoveContext(Context, State);
		EnterRule(_localctx, 22, RULE_remove);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(REMOVE);
			State = 110; removeAssetFromBag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveAssetFromBagContext : ParserRuleContext {
		public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public AssetDescriptorContext assetDescriptor() {
			return GetRuleContext<AssetDescriptorContext>(0);
		}
		public BagDescriptorContext bagDescriptor() {
			return GetRuleContext<BagDescriptorContext>(0);
		}
		public RemoveAssetFromBagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeAssetFromBag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterRemoveAssetFromBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitRemoveAssetFromBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveAssetFromBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveAssetFromBagContext removeAssetFromBag() {
		RemoveAssetFromBagContext _localctx = new RemoveAssetFromBagContext(Context, State);
		EnterRule(_localctx, 24, RULE_removeAssetFromBag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; quantity();
			State = 113; assetDescriptor();
			State = 114; bagDescriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(ChronosParser.TO, 0); }
		public ToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToContext to() {
		ToContext _localctx = new ToContext(Context, State);
		EnterRule(_localctx, 26, RULE_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagContext : ParserRuleContext {
		public ITerminalNode BAG() { return GetToken(ChronosParser.BAG, 0); }
		public BagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagContext bag() {
		BagContext _localctx = new BagContext(Context, State);
		EnterRule(_localctx, 28, RULE_bag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(BAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagsContext : ParserRuleContext {
		public ITerminalNode BAGS() { return GetToken(ChronosParser.BAGS, 0); }
		public BagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagsContext bags() {
		BagsContext _localctx = new BagsContext(Context, State);
		EnterRule(_localctx, 30, RULE_bags);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(BAGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ChronosParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ChronosParser.NUMBER, i);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 32, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(NUMBER);
			State = 123; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetContext : ParserRuleContext {
		public ITerminalNode COIN() { return GetToken(ChronosParser.COIN, 0); }
		public AssetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAsset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAsset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetContext asset() {
		AssetContext _localctx = new AssetContext(Context, State);
		EnterRule(_localctx, 34, RULE_asset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(COIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ChronosParser.NUMBER, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 36, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 38, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TickerContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public TickerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ticker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterTicker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitTicker(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTicker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TickerContext ticker() {
		TickerContext _localctx = new TickerContext(Context, State);
		EnterRule(_localctx, 40, RULE_ticker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(ChronosParser.DOUBLE, 0); }
		public ITerminalNode NUMBER() { return GetToken(ChronosParser.NUMBER, 0); }
		public QuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterQuantity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitQuantity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityContext quantity() {
		QuantityContext _localctx = new QuantityContext(Context, State);
		EnterRule(_localctx, 42, RULE_quantity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public GuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidContext guid() {
		GuidContext _localctx = new GuidContext(Context, State);
		EnterRule(_localctx, 44, RULE_guid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidOptionalContext : ParserRuleContext {
		public NewGuidContext newGuid() {
			return GetRuleContext<NewGuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public GuidOptionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidOptional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterGuidOptional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitGuidOptional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuidOptional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuidOptionalContext guidOptional() {
		GuidOptionalContext _localctx = new GuidOptionalContext(Context, State);
		EnterRule(_localctx, 46, RULE_guidOptional);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; newGuid();
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; Match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewGuidContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(ChronosParser.NEWLINE, 0); }
		public NewGuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newGuid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterNewGuid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitNewGuid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewGuid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewGuidContext newGuid() {
		NewGuidContext _localctx = new NewGuidContext(Context, State);
		EnterRule(_localctx, 48, RULE_newGuid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BagDescriptorContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public BagDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bagDescriptor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterBagDescriptor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitBagDescriptor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBagDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BagDescriptorContext bagDescriptor() {
		BagDescriptorContext _localctx = new BagDescriptorContext(Context, State);
		EnterRule(_localctx, 50, RULE_bagDescriptor);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; guid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; Match(WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssetDescriptorContext : ParserRuleContext {
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(ChronosParser.WORD, 0); }
		public AssetDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assetDescriptor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.EnterAssetDescriptor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChronosListener typedListener = listener as IChronosListener;
			if (typedListener != null) typedListener.ExitAssetDescriptor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChronosVisitor<TResult> typedVisitor = visitor as IChronosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssetDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssetDescriptorContext assetDescriptor() {
		AssetDescriptorContext _localctx = new AssetDescriptorContext(Context, State);
		EnterRule(_localctx, 52, RULE_assetDescriptor);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; guid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(WORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x9A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '@', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'L', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'^', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'i', '\n', '\f', '\x3', '\f', '\x5', '\f', 'l', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x8E', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x94', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x98', '\n', '\x1C', '\x3', '\x1C', 
		'\x2', '\x2', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\x3', 
		'\x3', '\x2', '\x12', '\x13', '\x2', '\x8C', '\x2', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x41', '\x3', '\x2', '\x2', '\x2', '\x6', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'R', '\x3', '\x2', '\x2', '\x2', '\x10', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '[', '\x3', '\x2', '\x2', '\x2', '\x14', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'o', '\x3', '\x2', '\x2', '\x2', '\x1A', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'v', '\x3', '\x2', '\x2', '\x2', '\x1E', 'x', '\x3', '\x2', 
		'\x2', '\x2', ' ', 'z', '\x3', '\x2', '\x2', '\x2', '\"', '|', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x7F', '\x3', '\x2', '\x2', '\x2', '&', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x83', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x85', '\x3', '\x2', '\x2', '\x2', ',', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x89', '\x3', '\x2', '\x2', '\x2', '\x30', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x36', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '@', '\x5', '\f', '\a', '\x2', '\x39', '@', '\x5', '\x12', 
		'\n', '\x2', ':', '@', '\x5', '\x14', '\v', '\x2', ';', '@', '\x5', '\b', 
		'\x5', '\x2', '<', '@', '\x5', '\x6', '\x4', '\x2', '=', '@', '\x5', '\x18', 
		'\r', '\x2', '>', '@', '\x5', '\n', '\x6', '\x2', '?', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x39', '\x3', '\x2', '\x2', '\x2', '?', ':', 
		'\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', '?', 
		'<', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x5', ' ', '\x11', '\x2', '\x42', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x5', '\x2', '\x2', '\x45', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\n', '\x2', '\x2', 'G', 'H', '\a', '\x5', '\x2', 
		'\x2', 'H', '\t', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\xE', '\x2', 
		'\x2', 'J', 'L', '\x5', '\"', '\x12', '\x2', 'K', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'P', '\a', '\x3', '\x2', '\x2', 'N', 'Q', '\x5', '\xE', 
		'\b', '\x2', 'O', 'Q', '\x5', '\x10', '\t', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\x4', '\x2', '\x2', 'S', 'T', '\x5', 
		'(', '\x15', '\x2', 'T', 'U', '\x5', '*', '\x16', '\x2', 'U', 'V', '\x5', 
		'\x30', '\x19', '\x2', 'V', '\xF', '\x3', '\x2', '\x2', '\x2', 'W', 'X', 
		'\a', '\a', '\x2', '\x2', 'X', 'Y', '\x5', '(', '\x15', '\x2', 'Y', 'Z', 
		'\x5', '\x30', '\x19', '\x2', 'Z', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'[', ']', '\a', '\x5', '\x2', '\x2', '\\', '^', '\x5', '$', '\x13', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x5', '(', '\x15', 
		'\x2', '`', '\x61', '\x5', '&', '\x14', '\x2', '\x61', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\b', '\x2', '\x2', '\x63', 
		'\x64', '\x5', '\x16', '\f', '\x2', '\x64', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\x5', ',', '\x17', '\x2', '\x66', 'h', '\x5', 
		'\x36', '\x1C', '\x2', 'g', 'i', '\x5', '\x1C', '\xF', '\x2', 'h', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', '\x1E', '\x10', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', '\x34', '\x1B', 
		'\x2', 'n', '\x17', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\f', 
		'\x2', '\x2', 'p', 'q', '\x5', '\x1A', '\xE', '\x2', 'q', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x5', ',', '\x17', '\x2', 's', 't', '\x5', 
		'\x36', '\x1C', '\x2', 't', 'u', '\x5', '\x34', '\x1B', '\x2', 'u', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\r', '\x2', '\x2', 'w', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\a', '\x2', '\x2', 'y', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '!', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x12', '\x2', '\x2', '}', 
		'~', '\a', '\x12', '\x2', '\x2', '~', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x80', '\a', '\x4', '\x2', '\x2', '\x80', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\a', '\x12', '\x2', '\x2', '\x82', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\xF', '\x2', '\x2', 
		'\x84', ')', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\xF', 
		'\x2', '\x2', '\x86', '+', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\t', '\x2', '\x2', '\x2', '\x88', '-', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\xF', '\x2', '\x2', '\x8A', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8E', '\x5', '\x32', '\x1A', '\x2', '\x8C', '\x8E', '\a', '\xF', 
		'\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x11', '\x2', '\x2', '\x90', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x94', '\x5', '.', '\x18', '\x2', '\x92', '\x94', 
		'\a', '\xF', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x98', '\x5', '.', '\x18', '\x2', '\x96', '\x98', 
		'\a', '\xF', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\v', '?', 'K', 'P', ']', 'h', 'k', '\x8D', '\x93', '\x97',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
